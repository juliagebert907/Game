use Libraries.Game.InputMonitor
use Libraries.Game.Game
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Sound.Audio
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Compute.Vector3
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Events.CollisionEvent3D
use Libraries.Game.Collision.Shapes.CollisionShape3D
use Libraries.Interface.Events.CollisionListener3D
use Libraries.Interface.Item3D

/*
    This is a default class for creating a game in Quorum. Note that the Main
    action begins by calling StartGame(), which loads a window a game can
    be displayed in. The action CreateGame is where the game should load any
    assets, like images to be displayed, frames of animation, or sounds to be
    played.
*/
class Main is Game, CollisionListener3D
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    InputMonitor monitor
    KeyboardEvent key
  Drawable cylinder
    Color clear
       Drawable wall
 Drawable wall2
    Drawable wall3
    Drawable wall4
    Drawable wall5
    Drawable wall6
    Drawable wall7
    Drawable wall8
    Drawable wall9
    Drawable wall10
    Drawable wall11
    Drawable wall12
    Drawable wall13
    Drawable wall14
    Drawable wall15
    Drawable wall16
//Camera camera = undefined

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action Maze
        wall:LoadFilledRectangle(20,600,clear:Black())
        wall:SetPosition(-5,0)
        wall:SetName("wall")

        wall2:LoadFilledRectangle(20,100,clear:Black())
        wall2:SetPosition(45,0)
        wall2:SetName("wall")

        wall3:LoadFilledRectangle(20,200,clear:Black())
        wall3:SetPosition(45,130)
        wall3:SetName("wall")

        wall4:LoadFilledRectangle(20,200,clear:Black())
        wall4:SetPosition(45,360)
        wall4:SetName("wall")

    wall5:LoadFilledRectangle(200,20,clear:Black())
        wall5:SetPosition(45,550)
        wall5:SetName("wall")
    
    wall6:LoadFilledRectangle(800,20,clear:Black())
        wall6:SetPosition(0,599)
        wall6:SetName("wall")

    wall7:LoadFilledRectangle(20,600,clear:Black())
        wall7:SetPosition(785,0)
        wall7:SetName("wall")
    wall8:LoadFilledRectangle(800,20,clear:Black())
        wall8:SetPosition(0,0)
        wall8:SetName("wall")

    wall9:LoadFilledRectangle(200,20,clear:Black())
        wall9:SetPosition(275,550)
        wall9:SetName("wall")

    wall10:LoadFilledRectangle(200,20,clear:Black())
        wall10:SetPosition(505,550)
        wall10:SetName("wall")

    wall11:LoadFilledRectangle(20,245,clear:Black())
        wall11:SetPosition(705,325)
        wall11:SetName("wall")

    wall12:LoadFilledRectangle(20,245,clear:Black())
        wall12:SetPosition(705,50)
        wall12:SetName("wall")

Add(wall9)
Add(wall10)

    Add(wall)
        Add(wall2)
Add(wall3)
Add(wall4)
Add(wall5)
Add(wall6)
Add(wall7)
Add(wall8)
Add(wall11)
Add(wall12)
wall11:EnablePhysics(true)
wall4:EnablePhysics(true)
wall5:EnablePhysics(true)
        wall:EnablePhysics(true)
wall6:EnablePhysics(true)
wall7:EnablePhysics(true)
wall8:EnablePhysics(true)

wall10:EnablePhysics(true)
wall9:EnablePhysics(true)
        wall:SetUnmovable()
        wall2:EnablePhysics(true)
        wall2:SetUnmovable()
wall3:EnablePhysics(true)
    end

    action CreateGame
        EnablePhysics2D(true)
      //  camera = GetCamera2D()
        Maze()
        clear:CustomColor(1,1,1,0.5)
        cylinder:LoadFilledRectangle(20,20,clear:Blue())
        cylinder:EnablePhysics(true)
        cylinder:SetResponsive()
            cylinder:SetPosition(200,200)
        cylinder:SetName("person")
        Add(cylinder)

        // this line places our camera up and to the right of our box
//        camera:SetPosition(-35, 0, -4)
        // this line tells our camera to look at the center of the 3D scene

        //camera:LookAt(0, 0, 0) 
        DirectionalLight light
        light:SetDirection(-1, -4, 3)
        light:SetColor(0.8, 0.8, 0.8, 1)
        Add(light)

        //these lines set the scene's ambient light
        AmbientLight ambient
        ambient:SetColor(0.4, 0.4, 0.4, 1)
        SetAmbientLight(ambient)
    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we
        might use this action to change frames of animation, to rotate items,
        or to make creatures jump.
    */
action BeginCollision()
    
end    
action Update(number seconds)
        integer speed = 50
        //camera:SetPosition(cylinder:GetPosition())
        if monitor:IsKeyPressed(key:RIGHT)
            number oldX = cylinder:GetX()
            number oldY = cylinder:GetY()
           cylinder:SetPosition(oldX+speed*seconds,oldY)
           
    //       ding:SetPosition(newx, cylinder:GetY(), cylinder:GetZ())
        end

        if monitor:IsKeyPressed(key:LEFT)
            number oldX = cylinder:GetX()
            number oldY = cylinder:GetY()
           cylinder:SetPosition(oldX-speed*seconds,oldY)

           
    //       ding:SetPosition(newx, cylinder:GetY(), cylinder:GetZ())
        end

        if monitor:IsKeyPressed(key:UP)
            number oldX = cylinder:GetX()
            number oldY = cylinder:GetY()
           cylinder:SetPosition(oldX,oldY+speed*seconds)

           
        //       ding:SetPosition(cylinder:GetX(), cylinder:GetY(), newz)
        end

        if monitor:IsKeyPressed(key:DOWN)
            number oldX = cylinder:GetX()
           number oldY = cylinder:GetY()
          cylinder:SetPosition(oldX,oldY-speed*seconds)
        //       ding:SetPosition(cylinder:GetX(), cylinder:GetY(), newz)

            end
        end
end